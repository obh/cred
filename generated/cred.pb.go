// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: proto/cred.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CredStatus int32

const (
	CredStatus_CRED_ACTIVE          CredStatus = 0
	CredStatus_VERIFIED             CredStatus = 1
	CredStatus_VERIFICATION_FAILED  CredStatus = 2
	CredStatus_DISABLED_BY_CASHFREE CredStatus = 3
	CredStatus_DISABLED_BY_BANK     CredStatus = 4
)

// Enum value maps for CredStatus.
var (
	CredStatus_name = map[int32]string{
		0: "CRED_ACTIVE",
		1: "VERIFIED",
		2: "VERIFICATION_FAILED",
		3: "DISABLED_BY_CASHFREE",
		4: "DISABLED_BY_BANK",
	}
	CredStatus_value = map[string]int32{
		"CRED_ACTIVE":          0,
		"VERIFIED":             1,
		"VERIFICATION_FAILED":  2,
		"DISABLED_BY_CASHFREE": 3,
		"DISABLED_BY_BANK":     4,
	}
)

func (x CredStatus) Enum() *CredStatus {
	p := new(CredStatus)
	*p = x
	return p
}

func (x CredStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CredStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_cred_proto_enumTypes[0].Descriptor()
}

func (CredStatus) Type() protoreflect.EnumType {
	return &file_proto_cred_proto_enumTypes[0]
}

func (x CredStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CredStatus.Descriptor instead.
func (CredStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_cred_proto_rawDescGZIP(), []int{0}
}

type ActionStatus int32

const (
	ActionStatus_SUCCESS ActionStatus = 0
	ActionStatus_PENDING ActionStatus = 1
	ActionStatus_FAILED  ActionStatus = 2
)

// Enum value maps for ActionStatus.
var (
	ActionStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "PENDING",
		2: "FAILED",
	}
	ActionStatus_value = map[string]int32{
		"SUCCESS": 0,
		"PENDING": 1,
		"FAILED":  2,
	}
)

func (x ActionStatus) Enum() *ActionStatus {
	p := new(ActionStatus)
	*p = x
	return p
}

func (x ActionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_cred_proto_enumTypes[1].Descriptor()
}

func (ActionStatus) Type() protoreflect.EnumType {
	return &file_proto_cred_proto_enumTypes[1]
}

func (x ActionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionStatus.Descriptor instead.
func (ActionStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_cred_proto_rawDescGZIP(), []int{1}
}

type GatewayCredScope int32

const (
	GatewayCredScope_DEDICATED GatewayCredScope = 0
	GatewayCredScope_CATEGORY  GatewayCredScope = 1
	GatewayCredScope_MASTER    GatewayCredScope = 2
)

// Enum value maps for GatewayCredScope.
var (
	GatewayCredScope_name = map[int32]string{
		0: "DEDICATED",
		1: "CATEGORY",
		2: "MASTER",
	}
	GatewayCredScope_value = map[string]int32{
		"DEDICATED": 0,
		"CATEGORY":  1,
		"MASTER":    2,
	}
)

func (x GatewayCredScope) Enum() *GatewayCredScope {
	p := new(GatewayCredScope)
	*p = x
	return p
}

func (x GatewayCredScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GatewayCredScope) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_cred_proto_enumTypes[2].Descriptor()
}

func (GatewayCredScope) Type() protoreflect.EnumType {
	return &file_proto_cred_proto_enumTypes[2]
}

func (x GatewayCredScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GatewayCredScope.Descriptor instead.
func (GatewayCredScope) EnumDescriptor() ([]byte, []int) {
	return file_proto_cred_proto_rawDescGZIP(), []int{2}
}

type GatewayCred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CredId             string                `protobuf:"bytes,1,opt,name=cred_id,json=credId,proto3" json:"cred_id,omitempty"`
	Status             CredStatus            `protobuf:"varint,2,opt,name=status,proto3,enum=credentity.CredStatus" json:"status,omitempty"`
	Gateway            *Gateway              `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	CredScope          GatewayCredScope      `protobuf:"varint,4,opt,name=cred_scope,json=credScope,proto3,enum=credentity.GatewayCredScope" json:"cred_scope,omitempty"`
	PaymentCodes       []uint32              `protobuf:"varint,5,rep,packed,name=payment_codes,json=paymentCodes,proto3" json:"payment_codes,omitempty"`
	BusinessCategories []BusinessCategories  `protobuf:"varint,6,rep,packed,name=business_categories,json=businessCategories,proto3,enum=credentity.BusinessCategories" json:"business_categories,omitempty"`
	WhitelistMcc       []uint32              `protobuf:"varint,7,rep,packed,name=whitelist_mcc,json=whitelistMcc,proto3" json:"whitelist_mcc,omitempty"`
	Attrs              []*GatewayAttrsValues `protobuf:"bytes,8,rep,name=attrs,proto3" json:"attrs,omitempty"`
	History            []*GatewayCredAction  `protobuf:"bytes,9,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *GatewayCred) Reset() {
	*x = GatewayCred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cred_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayCred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayCred) ProtoMessage() {}

func (x *GatewayCred) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cred_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayCred.ProtoReflect.Descriptor instead.
func (*GatewayCred) Descriptor() ([]byte, []int) {
	return file_proto_cred_proto_rawDescGZIP(), []int{0}
}

func (x *GatewayCred) GetCredId() string {
	if x != nil {
		return x.CredId
	}
	return ""
}

func (x *GatewayCred) GetStatus() CredStatus {
	if x != nil {
		return x.Status
	}
	return CredStatus_CRED_ACTIVE
}

func (x *GatewayCred) GetGateway() *Gateway {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *GatewayCred) GetCredScope() GatewayCredScope {
	if x != nil {
		return x.CredScope
	}
	return GatewayCredScope_DEDICATED
}

func (x *GatewayCred) GetPaymentCodes() []uint32 {
	if x != nil {
		return x.PaymentCodes
	}
	return nil
}

func (x *GatewayCred) GetBusinessCategories() []BusinessCategories {
	if x != nil {
		return x.BusinessCategories
	}
	return nil
}

func (x *GatewayCred) GetWhitelistMcc() []uint32 {
	if x != nil {
		return x.WhitelistMcc
	}
	return nil
}

func (x *GatewayCred) GetAttrs() []*GatewayAttrsValues {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *GatewayCred) GetHistory() []*GatewayCredAction {
	if x != nil {
		return x.History
	}
	return nil
}

type GatewayCredAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId         uint32       `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PreviousStatus CredStatus   `protobuf:"varint,3,opt,name=previous_status,json=previousStatus,proto3,enum=credentity.CredStatus" json:"previous_status,omitempty"`
	NewStatus      CredStatus   `protobuf:"varint,4,opt,name=new_status,json=newStatus,proto3,enum=credentity.CredStatus" json:"new_status,omitempty"`
	Reason         string       `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	Status         ActionStatus `protobuf:"varint,6,opt,name=status,proto3,enum=credentity.ActionStatus" json:"status,omitempty"`
}

func (x *GatewayCredAction) Reset() {
	*x = GatewayCredAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cred_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayCredAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayCredAction) ProtoMessage() {}

func (x *GatewayCredAction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cred_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayCredAction.ProtoReflect.Descriptor instead.
func (*GatewayCredAction) Descriptor() ([]byte, []int) {
	return file_proto_cred_proto_rawDescGZIP(), []int{1}
}

func (x *GatewayCredAction) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GatewayCredAction) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GatewayCredAction) GetPreviousStatus() CredStatus {
	if x != nil {
		return x.PreviousStatus
	}
	return CredStatus_CRED_ACTIVE
}

func (x *GatewayCredAction) GetNewStatus() CredStatus {
	if x != nil {
		return x.NewStatus
	}
	return CredStatus_CRED_ACTIVE
}

func (x *GatewayCredAction) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GatewayCredAction) GetStatus() ActionStatus {
	if x != nil {
		return x.Status
	}
	return ActionStatus_SUCCESS
}

var File_proto_cred_proto protoreflect.FileDescriptor

var file_proto_cred_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x13,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xcc, 0x03, 0x0a, 0x0b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43,
	0x72, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x43, 0x72, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4f, 0x0a,
	0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x12, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x63, 0x63, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x4d, 0x63, 0x63, 0x12, 0x34, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43,
	0x72, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x22, 0xfe, 0x01, 0x0a, 0x11, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x72,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2a, 0x74, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x46, 0x52, 0x45,
	0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f,
	0x42, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x10, 0x04, 0x2a, 0x34, 0x0a, 0x0c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a,
	0x3b, 0x0a, 0x10, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x72, 0x65, 0x64, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x42, 0x0d, 0x5a, 0x0b,
	0x2e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_cred_proto_rawDescOnce sync.Once
	file_proto_cred_proto_rawDescData = file_proto_cred_proto_rawDesc
)

func file_proto_cred_proto_rawDescGZIP() []byte {
	file_proto_cred_proto_rawDescOnce.Do(func() {
		file_proto_cred_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_cred_proto_rawDescData)
	})
	return file_proto_cred_proto_rawDescData
}

var file_proto_cred_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_cred_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_cred_proto_goTypes = []interface{}{
	(CredStatus)(0),            // 0: credentity.CredStatus
	(ActionStatus)(0),          // 1: credentity.ActionStatus
	(GatewayCredScope)(0),      // 2: credentity.GatewayCredScope
	(*GatewayCred)(nil),        // 3: credentity.GatewayCred
	(*GatewayCredAction)(nil),  // 4: credentity.GatewayCredAction
	(*Gateway)(nil),            // 5: credentity.Gateway
	(BusinessCategories)(0),    // 6: credentity.BusinessCategories
	(*GatewayAttrsValues)(nil), // 7: credentity.GatewayAttrsValues
}
var file_proto_cred_proto_depIdxs = []int32{
	0, // 0: credentity.GatewayCred.status:type_name -> credentity.CredStatus
	5, // 1: credentity.GatewayCred.gateway:type_name -> credentity.Gateway
	2, // 2: credentity.GatewayCred.cred_scope:type_name -> credentity.GatewayCredScope
	6, // 3: credentity.GatewayCred.business_categories:type_name -> credentity.BusinessCategories
	7, // 4: credentity.GatewayCred.attrs:type_name -> credentity.GatewayAttrsValues
	4, // 5: credentity.GatewayCred.history:type_name -> credentity.GatewayCredAction
	0, // 6: credentity.GatewayCredAction.previous_status:type_name -> credentity.CredStatus
	0, // 7: credentity.GatewayCredAction.new_status:type_name -> credentity.CredStatus
	1, // 8: credentity.GatewayCredAction.status:type_name -> credentity.ActionStatus
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_proto_cred_proto_init() }
func file_proto_cred_proto_init() {
	if File_proto_cred_proto != nil {
		return
	}
	file_proto_gateway_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_cred_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayCred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cred_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayCredAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_cred_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_cred_proto_goTypes,
		DependencyIndexes: file_proto_cred_proto_depIdxs,
		EnumInfos:         file_proto_cred_proto_enumTypes,
		MessageInfos:      file_proto_cred_proto_msgTypes,
	}.Build()
	File_proto_cred_proto = out.File
	file_proto_cred_proto_rawDesc = nil
	file_proto_cred_proto_goTypes = nil
	file_proto_cred_proto_depIdxs = nil
}
